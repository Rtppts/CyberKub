import { useState } from "react";
import { useNavigate } from "react-router-dom";

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á RSA
const n = 3233; // ‡∏Ñ‡πà‡∏≤ n ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏Ñ‡∏π‡∏ì‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ p ‡πÅ‡∏•‡∏∞ q
const e = 17; // ‡∏Ñ‡πà‡∏≤ e ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ä‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ (public exponent)
const d = 2753; // ‡∏Ñ‡πà‡∏≤ d ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ä‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (private exponent)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏±‡∏™ (Modular Exponentiation)
const modExp = (base: number, exp: number, mod: number) => {
  let result = 1;
  base = base % mod;
  while (exp > 0) {
    if (exp % 2 === 1) result = (result * base) % mod;
    exp = Math.floor(exp / 2);
    base = (base * base) % mod;
  }
  return result;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ e ‡πÅ‡∏•‡∏∞ n)
const encrypt = (text: string) => {
  return text.split("").map(char => modExp(char.charCodeAt(0), e, n));
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ d ‡πÅ‡∏•‡∏∞ n)
const decrypt = (encryptedArray: any[], userInput: number) => {
  const privateKeyToUse = userInput === d ? d : userInput;
  return encryptedArray.map(num => String.fromCharCode(modExp(num, privateKeyToUse, n))).join("");
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
const generateRandomData = () => {
  const names = ["Alice Johnson", "Bob Smith", "Charlie Brown", "David Lee", "Ella Adams", "Frank Wright", "Grace Scott", "Henry Hall", "Isla Green", "Jack White", "Katie Lewis", "Liam Young", "Mia Turner", "Noah Harris", "Olivia King", "Paul Allen", "Quinn Baker", "Ryan Nelson", "Sophia Clark", "Tom Walker"];
  return names.map((name, index) => ({
    id: index + 6,
    studentId: encrypt(`S100${index + 6}`),
    name: encrypt(name),
    grade: encrypt(["A", "B+", "B", "C+", "C", "D+", "D", "F"][Math.floor(Math.random() * 8)])
  }));
};

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
const sampleData = [
  { id: 1, studentId: encrypt("S10001"), name: encrypt("John Doe"), grade: encrypt("A") },
  { id: 2, studentId: encrypt("S10002"), name: encrypt("Jane Smith"), grade: encrypt("B+") },
  { id: 3, studentId: encrypt("S10003"), name: encrypt("Robert Brown"), grade: encrypt("C") },
  { id: 4, studentId: encrypt("14¬∞52'16\"N 102¬∞01'21\"E"), name: encrypt("N/A"), grade: encrypt("N/A") },
  { id: 5, studentId: encrypt("S10005"), name: encrypt("Michael White"), grade: encrypt("F") },
  ...generateRandomData()
];

const App = () => {
  const navigate = useNavigate();
  const [privateKeyInput, setPrivateKeyInput] = useState("");
  const [decryptedKey, setDecryptedKey] = useState<number | null>(null);
  const [hints, setHints] = useState([false, false, false]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  const handleDecrypt = () => {
    const userPrivateKey = parseInt(privateKeyInput.trim(), 10);
    if (isNaN(userPrivateKey)) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Private Key ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç!");
      return;
    }
    setDecryptedKey(userPrivateKey);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
  const toggleHint = (index: number) => {
    setHints(hints.map((hint, i) => (i === index ? !hint : hint)));
  };

  return (
    <div style={{ fontFamily: "Arial, sans-serif", padding: "20px", textAlign: "center", backgroundColor: "#222", color: "white", minHeight: "100vh" }}>
      <h1>üîê RSA Encrypted Micro Processor Student Grades</h1>

      {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å Private Key */}
      <div style={{ marginBottom: "20px" }}>
        <input
          type="text"
          value={privateKeyInput}
          onChange={(e) => setPrivateKeyInput(e.target.value)}
          placeholder="üîë ‡πÉ‡∏™‡πà Private Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
          style={{ padding: "10px", width: "300px" }}
        />
        <button
          onClick={handleDecrypt}
          style={{ marginLeft: "10px", padding: "10px", backgroundColor: "#28a745", color: "white", border: "none", cursor: "pointer" }}
        >
          üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        </button>
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ */}
      <div>
        {["How many building in SUT ? Ahhh if you have no idea it can help you ==> https://apmap.sut.ac.th/      But I think you should try to count by your self before 555... Enjoy (‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ ‡∏Ñ‡∏∑‡∏≠ Hint 1 ‡∏°‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏∂‡∏Å‡πÄ‡πÄ‡∏•‡∏∞‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ)", "From above,what is the name of disappear place? {The distance between it and Kasalongkham Cafeteria? (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ Hin 2)}", "Your desired destination = (Hint1/2+1) union (Hint2+53)==>{Union=‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô}"]
          .map((hint, index) => (
          <div key={index} style={{ margin: "5px" }}>
            <button 
              onClick={() => toggleHint(index)}
              style={{ padding: "10px", backgroundColor: "#ffcc00", color: "black", border: "none", cursor: "pointer" }}
            >
              {hints[index] ? "Hide Hint" : "Show Hint"} {index + 1}
            </button>
            {hints[index] && <p style={{ marginTop: "5px" }}>{hint}</p>}
          </div>
        ))}
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ */}
      <div style={{ maxWidth: "80%", margin: "0 auto", backgroundColor: "#fff", color: "black", padding: "20px", borderRadius: "10px", maxHeight: "400px", overflowY: "scroll" }}>
        <table border={1} style={{ width: "100%", textAlign: "left", borderCollapse: "collapse" }}>
          <thead>
            <tr style={{ backgroundColor: "#28a745", color: "white" }}>
              <th>ID</th>
              <th>Student ID</th>
              <th>Name</th>
              <th>Grade</th>
            </tr>
          </thead>
          <tbody>
            {sampleData.map(item => (
              <tr key={item.id}>
                <td>{item.id}</td>
                <td>{decryptedKey !== null ? decrypt(item.studentId, decryptedKey) : "üîí [Encrypted]"}</td>
                <td>{decryptedKey !== null ? decrypt(item.name, decryptedKey) : "üîí [Encrypted]"}</td>
                <td>{decryptedKey !== null ? decrypt(item.grade, decryptedKey) : "üîí [Encrypted]"}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {/* ‡∏õ‡∏∏‡πà‡∏° Next */}
      <button style={{ marginTop: "20px", padding: "10px", backgroundColor: "#007bff", color: "white", border: "none", cursor: "pointer" }} onClick={() => navigate("/palm")}>
        Next ‚û°
      </button>

    </div>
  );
};

export default App;
