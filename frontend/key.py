def gcd(a, b):
    """ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ GCD (Greatest Common Divisor) """
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(e, phi_n):
    """ ‡∏´‡∏≤ d (modular inverse ‡∏Ç‡∏≠‡∏á e mod œÜ(n)) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Extended Euclidean Algorithm """
    a, b = e, phi_n
    x0, x1, y0, y1 = 1, 0, 0, 1

    while b != 0:
        q = a // b
        a, b = b, a % b
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1

    if a != 1:
        return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ modular inverse
    return x0 % phi_n

def calculate_rsa_parameters(p, q, e):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ n, œÜ(n), ‡πÅ‡∏•‡∏∞ d ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RSA """
    n = p * q
    phi_n = (p - 1) * (q - 1)

    if gcd(e, phi_n) != 1:
        return "‚ùå Error: e ‡πÅ‡∏•‡∏∞ œÜ(n) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô coprime (GCD = 1)!"

    d = mod_inverse(e, phi_n)

    if d is None:
        return "‚ùå Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ d ‡πÑ‡∏î‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ e ‡πÉ‡∏´‡∏°‡πà"

    return {"p": p, "q": q, "n": n, "œÜ(n)": phi_n, "e": e, "d": d}

# üîπ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
p = 61  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1
q = 53  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 2
e = 2552  # ‡∏Ñ‡πà‡∏≤ Public Exponent ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ

rsa_params = calculate_rsa_parameters(p, q, e)

print("üîπ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ:")
print(rsa_params)
